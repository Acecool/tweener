#summary registerSpecialProperty (method)

= registerSpecialProperty (method) =

== Availability ==

AS2 and AS3.


== Usage ==

{{{
Tweener.registerSpecialProperty(name:String, getFunction:Function, setFunction:Function);
}}}


== Parameters ==

*name*: The name of the new special property you want to create. This name cannot conflict with the name of any existing [TweeningParameters tweening parameter], and it's recommended that you do not use the name of any [SpecialProperties special property] already existing as this would overwrite them.

*getFunction*: The function used to read the property or value corresponding to this special property. Must receive a parameter, which is the target object that must be read.

*setFunction*: The function used to set the value of the property corresponding to this special property. Must receive two parameters: the target object, which is the object that will be changed, and the desired value, which is a Number object.

== Returns ==

Nothing.


== Description ==

Static method; creates and registers a new [SpecialProperties special property], which is like a normal property, but with additional functionality. From an Object Oriented Programming point of view, this is like a [http://livedocs.adobe.com/flash/mx2004/main_7_2/wwhelp/wwhimpl/common/html/wwhelp.htm?context=Flash_MX_2004&file=00001074.html getter/setter] - meaning you create a function that reads a property, and another function that sets a property, then tie them both to a special property name.

Of course, this wouldn't be needed most of the times, as changing the value of a given property is all that's needed to create a transition of some kind. Some properties, however, do need additional code, and that's where the need for special properties arise. All [SpecialProperties special properties] used on Tweener are created and registered with this method.


== Examples ==

Suppose you want to create a new special property, called `_autoAlpha`, that immediately sets the `_alpha` of a `MovieClip` and, in case it is 0, also makes the object invisible by setting its `_visible` property to `false`. Since a `MovieClip` with `_alpha` set to 0 is still rendered (even if transparent) and still receives mouse events, this is a common need. In this case, one could register this new `_autoAlpha` property this way:

{{{
_autoAlpha_get = function(p_obj:Object):Number {
    return p_obj._alpha;
};
_autoAlpha_set = function(p_obj:Object, p_value:Number):Void {
    p_obj._alpha = p_value;
    p_obj._visible = (p_value == 0);
};
Tweener.registerSpecialProperty("_autoAlpha", _autoAlpha_get, _autoAlpha_set); 
}}}

First the get and set functions are created, and then, a new special property is registered. This new special property would be available and be accepted by Tweener from that point on, regardless of Class or Object referred to.

For example, to do a fade out with that new special property, it works like this:

{{{
myMC._visible = true;
myMC._alpha = 100;
Tweener.addTween(myMC, {_autoAlpha:0, time:1}); 
}}}

After fading out, `myMC` would automatically be set to invisible.

As a comparison, the alternative - without using a new special property, and using events to synchronize the visibility change to the tweening start or end, regardless of initial delays - would be this:

{{{
// Fade in
Tweener.addTween(myMC, {_alpha:100, time:1, onStart:function() { this._visible = true; }});

// Or fade out
Tweener.addTween(myMC, {_alpha:0, time:1, onComplete:function() { this._visible = false; }});
}}}


== See also ==

[registerSpecialPropertySplitter], [SpecialProperties Special properties]