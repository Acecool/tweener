#summary List of special properties that can be used for tweening
#labels Temp

= Special Properties =

When creating new tweenings, Tweener lets you use certain special properties to create transitions on values that are numeric, but not directly available as a property. This usually includes Sound volume or panning, movieclip frames, color properties, and so on.

To create new regular tweenings, one would make use of the [addTween] method, like so:

{{{
import caurina.transitions.Tweener;
Tweener.addTween(myMC, {_x:10, time:1, transition:"linear"});
}}}

The special tweenings work in the same way. For example, to create a playback tweening - one that moves a `MovieClip`'s timeline based on the tweening position - a developer would simply write this:

{{{
import caurina.transitions.Tweener;
Tweener.addTween(myMC, {_frame:100, time:1, transition:"linear"});
}}}

So `_frame`, in this context, is the name of the special property being tweened. When it is applied, it actually works by reading the current `MovieClip` frame - by way of `_currentframe` - or applying a new one, by way of `gotoAndStop()`. The same can be said about all other special tweening properties, as they work by setting values with methods, or reading them with functions.

Tweener has a list of default special properties that are automatically created when using Tweener. However, any developer can add new special properties on their own movies for specific tasks. See the [registerSpecialProperty] and [registerSpecialPropertySplitter] methods for more information.

Below is the list of default special properties that can be used on Tweener out-of-the-box. Be aware that they have the same name for both AS2 and AS3 versions - the idea is that the underline before the property name will identify the special properties - but their desired values may vary as the properties they refer to may have changed; Tweener follows the conventions of the current version language, event if the special properties themselves are customized pieces of code.


== Special properties for MovieClip objects ==

=== _color ===

...

=== _colorTransform ===

...

=== _color_ra ===

...

=== _color_rb ===

...

=== _color_ga ===

...

=== _color_gb ===

...

=== _color_ba ===

...

=== _color_bb ===

...

=== _color_aa ===

...

=== _color_ab ===

...

=== _frame ===

Frame number you want a movieclip to navigate to. A kind of controlled playback. This is specially interesting when you want a movieclip animation to execute on a very specific ammount of time, or with a different transition, as simply issuing `gotoAndPlay()` doesn't allow you much control over time. This is not meant as an automatic playback/rewind/fastforward engine though, as it's only good for seeking with specific times and transitions.

Under both AS2 and AS3, allowed values range from 1 to the last movieclip frame.

*Example (AS2 and AS3)*

{{{
Tweener.addTween(myMC, {_frame:10, time:1, transition:"linear"});
}}}


== Special properties for Sound objects ==

=== _sound_volume ==

Sets the sound volume of a `Sound` object (AS2) or a `SoundChannel` object (AS3).

Under AS2, allowed values range from 0 (silent) to 100 (full volume).

Under AS3, allowed values range from 0 (silent) to 1 (full volume).

*Example (AS2)*

{{{
import caurina.transitions.Tweener;

// Create a new Sound object
this.loopSound = new Sound(this);

// Attach a sound asset from the library to it
this.loopSound.attachSound("mySoundFromTheLibrary");

// Initially, reset the sound
this.loopSound.setVolume(0);

// Now play...
this.loopSound.start(0, 1000);

// ... and fade it in
Tweener.addTween(this.loopSound, {_sound_volume:100, time:1, transition:"linear"});
}}}

*Example (AS3)*

{{{
import caurina.transitions.Tweener;
import flash.media.Sound;
import flash.media.SoundTransform;

Tweener.init(stage);

// Create a new Sound object from the library
this.loopSound = new MySoundFromTheLibrary();

// Plays it with a SoundTransform instance for mute volume
var sndTransform:SoundTransform = new SoundTransform();
sndTransform.volume = 0;
this.loopChannel = this.loopSound.play(0, 1000, sndTransform);

// And fade it in
Tweener.addTween(this.loopChannel , {_sound_volume:100, time:1, transition:"linear"});
}}}

=== _sound_pan ==

Sets the sound panning - the balance of sound volume between the left and right speaker - of a `Sound` object (AS2) or a `SoundChannel` object (AS3).

Under AS2, allowed values range from -100 (left speaker only) to 0 (both speakers) to 100 (right speaker only).

Under AS3, allowed values range from -1 (left speaker only) to 0 (both speakers) to 1 (right speaker only).