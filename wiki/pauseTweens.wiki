#summary pauseTweens (method)
#labels Documentation-Method

= pauseTweens (method) =

== Availability ==

AS2 and AS3.


== Usage ==

{{{
Tweener.pauseTweens(object:Object, property1:String, property2:String, ...):Boolean;
}}}


== Parameters ==

*object*: The object that you want to pause. Usually, a `MovieClip`, `TextField`, or some instance of any other class which has numeric properties. This parameter is required.

*property1* ... *propertyN*: The name of the property or properties currently being tweened that you want to pause. This is a string containing the name of the property, and any number of strings can be specified as parameters. If no property name is specified, all tweenings for this specific object are paused.


== Returns ==

`true` if any property was successfully paused, `false` if otherwise.


== Description ==

Static method; pauses specific tweenings of specific objects. All currently existing tweenings that match the object (or object and property) are paused, including tweenings currently delayed. Tweenings that are already paused are not affected. Paused tweenings can be resumed with [resumeTweens].


== Examples ==

{{{
// Pauses all tweenings of a certain object
Tweener.pauseTweens(myMC);

// Pauses the _x tweening of a certain object
Tweener.pauseTweens(myMC, "_x");

// Pauses the _x, _y and _alpha tweening of a certain object
Tweener.pauseTweens(myMC, "_x", "_y", "_alpha");
}}}

== Notes ==

It's important to notice that, when creating tweenings for multiple properties using [addTween] and issuing events such as `onStart`, `onUpdate` or `onComplete` to them, they are tied to the original tweening, not to the property names themselves. This means that, in an event of a pause affecting a tweening with multiple variables, unless you're pausing all properties linked to a tweening with such events, the paused properties will be split from the original tweening and will not fire the events anymore.

If this is a problem, it should be solved by creating separate tweenings and working with them accordingly. There is no real solution when splitting a tweening with multiple properties in half, as the current alternative - duplicating events - is also a problem in itself. Instead, a developer should keep this caveat in mind and plan accordingly when writing code.

For example, take this code:

{{{
myMC._alpha = 100;
myMC._x = 100;
Tweener.addTween(myMC, {_alpha:0, _x:0, time:1, onComplete:function() {this._visible = false; });

// (Later on the program)
Tweener.pauseTween(myMC, "_alpha");
}}}

In the above code, the `pauseTween()` issued would split what was originally a single tween (in `_x` and `_alpha`) in two. Only the first tweening (the one with `_x`) would keep the onComplete event. This means that as soon as the `_x` tweening was done, the !MovieCLip `myMC` would disappear all of a sudden, even if the `_alpha` tweening was paused.

The solution, in this case, would be to properly split the code, as in:

{{{
myMC._alpha = 100;
myMC._x = 100;
Tweener.addTween(myMC, {_x:0, time:1);
Tweener.addTween(myMC, {_alpha:0, time:1, onComplete:function() {this._visible = false; });

// (Later on the program)
Tweener.pauseTween(myMC, "_alpha");
}}}

This way, issuing the `pauseTween()` command would properly act on the events as desired.


== See also ==

[resumeTweens], [removeTweens]